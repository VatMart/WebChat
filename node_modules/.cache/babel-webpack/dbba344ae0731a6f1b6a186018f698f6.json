{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../../services/room.service\";\nimport * as i3 from \"@angular/material/list\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/divider\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/forms\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/icon\";\n\nfunction DialogMembers_mat_list_item_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-list-item\");\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"face\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \"\\u0418\\u043C\\u044F:\\u00A0\");\n    i0.ɵɵelementStart(4, \"b\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 8);\n    i0.ɵɵelementStart(7, \"mat-icon\");\n    i0.ɵɵtext(8, \"clear\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const user_r1 = ctx.$implicit;\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(user_r1.nickname);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", true);\n  }\n}\n\nlet MessageListComponent = class MessageListComponent {\n  constructor(dataHandlerService, roomService, messageService, dialog, tokenStorageService, notificationService, imageService) {\n    this.dataHandlerService = dataHandlerService;\n    this.roomService = roomService;\n    this.messageService = messageService;\n    this.dialog = dialog;\n    this.tokenStorageService = tokenStorageService;\n    this.notificationService = notificationService;\n    this.imageService = imageService;\n    this.selfMessage = \"ks-self\";\n    this.fromMessage = \"ks-from\";\n    this.disableScrollDown = false;\n  }\n\n  ngOnInit() {\n    this.currentUserId = this.tokenStorageService.getUser().user_id;\n    console.log(\"TEMP userId=\" + this.currentUserId); //this.users = this.dataHandlerService.getUserList();\n    //this.messages = this.dataHandlerService.getMessages();\n\n    this.roomService.selectedRoom.subscribe(room => {\n      this.activeRoom = room;\n      this.users = room.users;\n      this.messageService.getAllMessages(this.activeRoom.id);\n      this.imageService.getUsersImagesFromRoom(room, this.userImages);\n    });\n    this.messageService.subjectMessages.subscribe(messages => {\n      this.messages = messages;\n      this.disableScrollDown = false;\n      this.scrollToBottom();\n    });\n    this.messageService.subjectMessage.subscribe(message => {\n      if (this.activeRoom.id === message.room_id) {\n        this.messages.push(message);\n        this.disableScrollDown = false;\n        this.scrollToBottom();\n        console.log(\"Новое сообщение из текущей комнаты \" + message.room_id);\n      } else {\n        console.log(\"Новое сообщение из комнаты \" + message.room_id);\n        this.notificationService.showSnackBar(\"Новое сообщение из комнаты \" + message.room_id);\n      }\n    });\n    this.scrollToBottom();\n  } //*ngIf=\"getSenderImage(message.sender_id) | async; let image\"\n\n\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n\n  onReceivedImage(data) {\n    return data.imageBytes;\n  }\n\n  getSenderImage(senderId) {\n    return this.imageService.getUserImage(senderId).pipe(map(val => 'data:image/jpeg;base64,' + val.imageBytes));\n  }\n\n  onScroll() {\n    let element = this.myScrollContainer.nativeElement;\n    let atBottom = element.scrollHeight - element.scrollTop === element.clientHeight;\n    this.disableScrollDown = !(this.disableScrollDown && atBottom);\n  }\n\n  scrollToBottom() {\n    if (this.disableScrollDown) {\n      return;\n    }\n\n    try {\n      this.myScrollContainer.nativeElement.scrollTop = this.myScrollContainer.nativeElement.scrollHeight;\n    } catch (err) {}\n  }\n\n  openDialogMembers() {\n    const dialogRef = this.dialog.open(DialogMembers, {\n      //width: '250px',\n      // height: '50%',\n      data: {\n        room: this.activeRoom,\n        users: this.users\n      }\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n  sendMessage() {\n    if (this.newMessageText && this.newMessageText.length > 0) {\n      this.messageService.createMessage(this.activeRoom.id, this.newMessageText);\n      this.newMessageText = '';\n    } else {\n      console.log(\"Сообщение пустое!\");\n    }\n  }\n\n};\n\n__decorate([ViewChild('scrollMe')], MessageListComponent.prototype, \"myScrollContainer\", void 0);\n\nMessageListComponent = __decorate([Component({\n  selector: 'app-message-list',\n  templateUrl: './message-list.component.html',\n  styleUrls: ['./message-list.component.css'],\n  styles: []\n})], MessageListComponent);\nexport { MessageListComponent };\nexport class DialogMembers {\n  constructor(dialogRef, data, roomService) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.roomService = roomService;\n  }\n\n  addUser() {\n    this.roomService.addUserToRoom(this.nickname, this.data.room.id);\n  }\n\n}\n\nDialogMembers.ɵfac = function DialogMembers_Factory(t) {\n  return new (t || DialogMembers)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.RoomService));\n};\n\nDialogMembers.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DialogMembers,\n  selectors: [[\"dialog-members\"]],\n  decls: 20,\n  vars: 3,\n  consts: [[\"mat-dialog-title\", \"\"], [1, \"mat-typography\"], [4, \"ngFor\", \"ngForOf\"], [\"hintLabel\", \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\"], [\"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-raised-button\", \"\", 1, \"add-user-button\", 3, \"click\"], [\"align\", \"end\"], [\"mat-button\", \"\", 1, \"close-button\", 3, \"mat-dialog-close\"], [\"mat-icon-button\", \"\", 2, \"position\", \"absolute\", \"right\", \"20px\", 3, \"disabled\"]],\n  template: function DialogMembers_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"mat-dialog-content\", 1);\n      i0.ɵɵelementStart(3, \"mat-list\");\n      i0.ɵɵtext(4, \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0438: \");\n      i0.ɵɵtemplate(5, DialogMembers_mat_list_item_5_Template, 9, 2, \"mat-list-item\", 2);\n      i0.ɵɵelement(6, \"mat-divider\");\n      i0.ɵɵelementStart(7, \"mat-list-item\");\n      i0.ɵɵelementStart(8, \"mat-form-field\", 3);\n      i0.ɵɵelementStart(9, \"mat-label\");\n      i0.ɵɵtext(10, \"\\u041D\\u0438\\u043A\\u043D\\u0435\\u0439\\u043C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function DialogMembers_Template_input_ngModelChange_11_listener($event) {\n        return ctx.nickname = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"span\");\n      i0.ɵɵelementStart(13, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function DialogMembers_Template_button_click_13_listener() {\n        return ctx.addUser();\n      });\n      i0.ɵɵelementStart(14, \"mat-icon\");\n      i0.ɵɵtext(15, \"add_circle_outline\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(16, \" \\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"mat-dialog-actions\", 6);\n      i0.ɵɵelementStart(18, \"button\", 7);\n      i0.ɵɵtext(19, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0438 \\u043A\\u043E\\u043C\\u043D\\u0430\\u0442\\u044B \", ctx.data.room.name, \"\");\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.data.users);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.nickname);\n    }\n  },\n  directives: [i1.MatDialogTitle, i1.MatDialogContent, i3.MatList, i4.NgForOf, i5.MatDivider, i3.MatListItem, i6.MatFormField, i6.MatLabel, i7.MatInput, i8.DefaultValueAccessor, i8.NgControlStatus, i8.NgModel, i9.MatButton, i10.MatIcon, i1.MatDialogActions, i1.MatDialogClose],\n  styles: [\".mat-dialog-content[_ngcontent-%COMP%] {\\r\\n  padding: 10px;\\r\\n\\r\\n}\\r\\n.mat-icon[_ngcontent-%COMP%] {\\r\\n  margin-left: 5px;\\r\\n  margin-right: 5px;\\r\\n}\\r\\nspan[_ngcontent-%COMP%] {\\r\\n  margin-left: 15px;\\r\\n}\\r\\n.mat-divider[_ngcontent-%COMP%] {\\r\\n  padding-top: 10px;\\r\\n  padding-bottom: 5px;\\r\\n  margin-left: 20px;\\r\\n  margin-right: 20px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lc3NhZ2UtbGlzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTs7QUFFZjtBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSxpQkFBaUI7RUFDakIsbUJBQW1CO0VBQ25CLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEIiLCJmaWxlIjoibWVzc2FnZS1saXN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWF0LWRpYWxvZy1jb250ZW50IHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG5cclxufVxyXG4ubWF0LWljb24ge1xyXG4gIG1hcmdpbi1sZWZ0OiA1cHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiA1cHg7XHJcbn1cclxuc3BhbiB7XHJcbiAgbWFyZ2luLWxlZnQ6IDE1cHg7XHJcbn1cclxuLm1hdC1kaXZpZGVyIHtcclxuICBwYWRkaW5nLXRvcDogMTBweDtcclxuICBwYWRkaW5nLWJvdHRvbTogNXB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xyXG4gIG1hcmdpbi1yaWdodDogMjBweDtcclxufVxyXG4iXX0= */\"]\n});","map":{"version":3,"sources":["D:\\Projects\\AngularProjects\\WebChat\\src\\app\\views\\message-list\\message-list.component.ts","D:\\Projects\\AngularProjects\\WebChat\\src\\app\\views\\message-list\\dialog-members.html"],"names":[],"mappings":"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","sourcesContent":["import {AfterViewChecked, Component, ElementRef, Inject, Input, OnInit, ViewChild} from '@angular/core';\nimport {DataHandlerService} from \"../../services/data-handler.service\";\nimport {User} from \"../../model/user\";\nimport {Room} from \"../../model/room\";\nimport {Message} from \"../../model/message\";\nimport {RoomService} from \"../../services/room.service\";\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from \"@angular/material/dialog\";\nimport {MessageService} from \"../../services/message.service\";\nimport {TokenStorageService} from \"../../services/token-storage.service\";\nimport {NotificationService} from \"../../services/notification.service\";\nimport {ImageUploadService} from \"../../services/image-upload.service\";\nimport {filter, map} from \"rxjs/operators\";\nimport {Observable} from \"rxjs\";\n\n@Component({\n  selector: 'app-message-list',\n  templateUrl: './message-list.component.html',\n  styleUrls: ['./message-list.component.css']\n})\nexport class MessageListComponent implements OnInit, AfterViewChecked {\n\n  users!: User[];\n  activeRoom!: Room;\n  messages!: Message[];\n  currentUserId!: number;\n  selfMessage: String = \"ks-self\";\n  fromMessage: String = \"ks-from\";\n  userImages!: Map<number, File>;\n\n  newMessageText!: String;\n  @ViewChild('scrollMe') private myScrollContainer!: ElementRef;\n  disableScrollDown = false;\n\n\n  constructor(private dataHandlerService: DataHandlerService,\n              private roomService: RoomService,\n              public messageService: MessageService,\n              public dialog: MatDialog,\n              private tokenStorageService: TokenStorageService,\n              private notificationService: NotificationService,\n              public imageService: ImageUploadService) {\n  }\n\n  ngOnInit(): void {\n    this.currentUserId = this.tokenStorageService.getUser().user_id;\n    console.log(\"TEMP userId=\"+this.currentUserId);\n    //this.users = this.dataHandlerService.getUserList();\n    //this.messages = this.dataHandlerService.getMessages();\n    this.roomService.selectedRoom.subscribe(room => {\n      this.activeRoom = room;\n      this.users = room.users;\n      this.messageService.getAllMessages(this.activeRoom.id);\n      this.imageService.getUsersImagesFromRoom(room, this.userImages);\n    });\n    this.messageService.subjectMessages.subscribe((messages) => {\n      this.messages = messages;\n      this.disableScrollDown = false\n      this.scrollToBottom();\n    })\n    this.messageService.subjectMessage.subscribe((message) => {\n      if (this.activeRoom.id === message.room_id) {\n        this.messages.push(message);\n        this.disableScrollDown = false;\n        this.scrollToBottom();\n        console.log(\"Новое сообщение из текущей комнаты \" + message.room_id);\n      } else {\n        console.log(\"Новое сообщение из комнаты \" + message.room_id);\n        this.notificationService.showSnackBar(\"Новое сообщение из комнаты \" + message.room_id);\n      }\n    })\n    this.scrollToBottom();\n  }\n  //*ngIf=\"getSenderImage(message.sender_id) | async; let image\"\n\n  ngAfterViewChecked() {\n    this.scrollToBottom();\n  }\n\n  onReceivedImage(data : any) : any {\n    return data.imageBytes;\n  }\n\n  getSenderImage(senderId: number): Observable<String> {\n    return this.imageService.getUserImage(senderId).pipe(\n      map(val => ('data:image/jpeg;base64,' +val.imageBytes))\n    );\n  }\n\n\n\n  onScroll() {\n    let element = this.myScrollContainer.nativeElement\n    let atBottom = element.scrollHeight - element.scrollTop === element.clientHeight\n    this.disableScrollDown = !(this.disableScrollDown && atBottom);\n  }\n\n  scrollToBottom(): void {\n    if (this.disableScrollDown) {\n      return;\n    }\n    try {\n      this.myScrollContainer.nativeElement.scrollTop = this.myScrollContainer.nativeElement.scrollHeight;\n    } catch(err) { }\n  }\n\n  openDialogMembers() {\n    const dialogRef = this.dialog.open(DialogMembers, {\n      //width: '250px',\n     // height: '50%',\n      data: {room: this.activeRoom, users: this.users}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n  sendMessage() {\n    if (this.newMessageText && this.newMessageText.length>0) {\n        this.messageService.createMessage(this.activeRoom.id, this.newMessageText);\n        this.newMessageText = '';\n    } else {\n      console.log(\"Сообщение пустое!\");\n    }\n  }\n}\nexport interface MemberDialogData {\n  room: Room;\n  users: User[];\n}\n@Component({\n  selector: 'dialog-members',\n  templateUrl: 'dialog-members.html',\n  styleUrls: ['./message-list.component.css']\n})\nexport class DialogMembers {\n  nickname!:string;\n\n  constructor(\n    public dialogRef: MatDialogRef<DialogMembers>,\n    @Inject(MAT_DIALOG_DATA) public data: MemberDialogData,\n    private roomService: RoomService) {}\n\n  addUser() {\n    this.roomService.addUserToRoom(this.nickname, this.data.room.id);\n  }\n}\n","<h2 mat-dialog-title>Настройки комнаты {{data.room.name}}</h2>\r\n<mat-dialog-content class=\"mat-typography\">\r\n  <mat-list>Пользователи:\r\n    <mat-list-item *ngFor=\"let user of data.users\">\r\n      <mat-icon>face</mat-icon>Имя:&nbsp;<b>{{user.nickname}}</b>\r\n      <button mat-icon-button [disabled]=\"true\" style=\"position: absolute; right: 20px\">\r\n        <mat-icon>clear</mat-icon>\r\n      </button>\r\n    </mat-list-item>\r\n    <mat-divider></mat-divider>\r\n    <mat-list-item>\r\n      <mat-form-field hintLabel=\"Добавить пользователя\">\r\n        <mat-label>Никнейм пользователя</mat-label>\r\n        <input matInput [(ngModel)]=\"nickname\">\r\n      </mat-form-field>\r\n      <span>\r\n        <button mat-raised-button class=\"add-user-button\" (click)=\"addUser()\">\r\n          <mat-icon>add_circle_outline</mat-icon>\r\n          Добавить\r\n        </button>\r\n      </span>\r\n    </mat-list-item>\r\n  </mat-list>\r\n</mat-dialog-content>\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-button class=\"close-button\" [mat-dialog-close]>Закрыть</button>\r\n</mat-dialog-actions>\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}